<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:security="http://www.springframework.org/schema/security"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
	   http://www.springframework.org/schema/beans/spring-beans.xsd
	   http://www.springframework.org/schema/security
	   http://www.springframework.org/schema/security/spring-security-4.0.xsd">
	
	<!-- Sempre que uma requisição chegar ao Filter Chain ela será validada conforme
	esta configuração de cima para baixo -->
	<security:http auto-config="true">
		<security:form-login login-page="/"
							 default-target-url="/"
							 authentication-failure-url="/"/>
		<!-- <security:intercept-url	pattern="/post/publicar/**" access="ROLE_MEMBRO"/>
		<security:intercept-url	pattern="/user/editar/**" access="ROLE_ADMIN,ROLE_MEMBRO"/> -->
		<!-- <security:intercept-url pattern="/**" access="ROLE_ANONYMOUS"/> -->
		<security:intercept-url pattern="/post/publicar/**" access="hasRole('ROLE_MEMBRO')"/>
	</security:http>
	<!-- Auto-config = "true" proporciona:
		- Criará um formulário de autenticação de forma automática;	
		- Define as URLs de logout e autenticação a partir de convenções que veremos
		mais à frente;
		- Configura o filtro encadeador ( SpringSecurityFilterChain ).
	 -->
	 
	<security:authentication-manager>
		<security:authentication-provider>
			<security:user-service>
				<security:user name="teste"	password="123" authorities="ROLE_MEMBRO"/>
				<!-- <security:user name="admin"	password="admin" authorities="ROLE_MEMBRO,ROLE_ADMIN"/> -->
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager>
	
</beans>